#!/bin/bash

SHOULD_REBASE=false
SHOULD_PUSH=false
SHOULD_PUSH_FORCE=false
SHOULD_RUN_TESTS=false

while getopts 'rpft' opt; do
  case $opt in
    r) SHOULD_REBASE=true ;;
    p) SHOULD_PUSH=true ;;
    f) SHOULD_PUSH_FORCE=true ;;
    t) SHOULD_RUN_TESTS=true ;;
    *) echo 'Error in command line parsing' >&2
      exit 1
  esac
done
shift "$(( OPTIND - 1 ))"

REPO_ROOT=$(git rev-parse --show-toplevel)
if [ -z "${REPO_ROOT}" ]; then
  echo "Not in a git repo, aborting..."
  exit 1
fi

BRANCH=$(git branch --show-current)
if [ -z "${BRANCH}" ]; then
  echo "Not on a branch, aborting..."
  exit 1
fi

git fetch

if [ "${SHOULD_REBASE}" == "true" ]; then
  if ! git rebase origin/${BRANCH}; then
    echo Rebase onto upstream failed, fix the conflicts first
    exit 1
  fi
  if ! git rebase origin/master; then
    echo Rebase onto master failed, fix the conflicts first
    exit 1
  fi
else
  if ! git merge --no-edit origin/${BRANCH}; then
    echo Merge with upstream failed, fix the conflicts first
    exit 1
  fi
  if ! git merge --no-edit origin/master; then
    echo Merge with master failed, fix the conflicts first
    exit 1
  fi
fi

if [ "${SHOULD_RUN_TESTS}" == "true" ]; then
  if [ -f "${REPO_ROOT}/go.mod" ]; then
    make test
  fi
  if [ -f "${REPO_ROOT}/package.json" ]; then
    yarn test
  fi
fi

if [ "${SHOULD_PUSH}" == "true" ]; then
  if [ "${SHOULD_PUSH_FORCE}" == "true" ]; then
    echo "Warning! Push with --force flag"
    git push -f origin HEAD
  else
    git push origin HEAD
  fi
fi

if [ -f "${REPO_ROOT}/go.mod" ]; then
  go mod download
  go mod tidy
fi

if [ -f "${REPO_ROOT}/package.json" ]; then
  yarn
fi

